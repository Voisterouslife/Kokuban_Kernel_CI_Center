name: 7. Weekly Differential Release (Parallel)
on:
  workflow_dispatch:
    inputs:
      project_key:
        description: 'Project to build'
        required: true
        default: 'all'
        type: choice
        options:
          - s24_sm8650
  schedule:
    - cron: '0 16 * * 0'

jobs:
  # Job 1: Create a matrix of all individual build tasks (project + branch)
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Central Repo
        uses: actions/checkout@v4
      - name: Set up matrix
        id: set-matrix
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PROJECT_KEYS_INPUT="${{ github.event.inputs.project_key }}"
          if [ "$PROJECT_KEYS_INPUT" == "all" ] || [ -z "$PROJECT_KEYS_INPUT" ]; then
            # Scheduled run or manual "all": get all project keys
            PROJECT_KEYS=$(jq -r 'keys | .[]' configs/projects.json)
          else
            # Manual run for a single project
            PROJECT_KEYS=$PROJECT_KEYS_INPUT
          fi

          FINAL_MATRIX="[]"
          
          for PK in $PROJECT_KEYS; do
            PROJECT_CONFIG=$(jq -c --arg P "$PK" '.[$P]' configs/projects.json)
            if [ "$PROJECT_CONFIG" == "null" ]; then
              echo "::error::Project key '$PK' not found in configs/projects.json"
              exit 1
            fi
            SUPPORTED_KSU=$(echo "$PROJECT_CONFIG" | jq -r '.supported_ksu | .[]')
            REPO_NAME=$(echo "$PROJECT_CONFIG" | jq -r '.repo')

            if git ls-remote --exit-code --heads "https://x-access-token:${GH_TOKEN}@github.com/${REPO_NAME}" main >/dev/null 2>&1; then
              ALL_BRANCHES="main $SUPPORTED_KSU"
            else
              ALL_BRANCHES="$SUPPORTED_KSU"
            fi

            for BRANCH in $ALL_BRANCHES; do
              SUFFIX_RAW=$(echo "$BRANCH" | tr '[:lower:]' '[:upper:]')
              SUFFIX=$(echo "$SUFFIX_RAW" | sed 's/SUKI SUULTRA/SukiSUU/' | sed 's/MAIN/LKM/')
              JOB_JSON=$(jq -cn --arg pk "$PK" --arg b "$BRANCH" --arg s "$SUFFIX" --argjson cfg "$PROJECT_CONFIG" \
                '{ "project_key": $pk, "branch": $b, "suffix": $s, "config": $cfg }')
              FINAL_MATRIX=$(echo "$FINAL_MATRIX" | jq -c ". + [$JOB_JSON]")
            done
          done
          
          echo "matrix=$(echo "$FINAL_MATRIX" | jq -c .)" >> $GITHUB_OUTPUT

  # Job 2: Build all branches in parallel based on the matrix
  build:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: 
        task: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    
    steps:
      - name: Checkout Central Repo
        uses: actions/checkout@v4
        with:
          path: central_repo
      - name: Checkout Kernel Source Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.task.config.repo }}
          ref: ${{ matrix.task.branch }}
          path: kernel_repo

      - name: Cache Toolchain
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: toolchain
          key: Linux-toolchain-${{ matrix.task.project_key }}

      - name: Download and Extract Toolchain
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          echo "Toolchain cache not found, downloading and extracting..."
          mkdir -p toolchain
          cd toolchain
          for url in $(echo '${{ toJSON(matrix.task.config.toolchain_urls) }}' | jq -r '.[]'); do
            wget -q "$url"
          done
          cat * | tar -zxf - -i
      
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-${{ matrix.task.project_key }}-${{ matrix.task.branch }}
          max-size: 2G

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libncurses5-dev bc bison flex libssl-dev p7zip-full \
            lz4 cpio curl libelf-dev dwarves ccache jq lld
      - name: Run Single Branch Build Script
        env:
          BRANCH_NAME: ${{ matrix.task.branch }}
          VERSION_SUFFIX: ${{ matrix.task.suffix }}
          PROJECT_KEY: ${{ matrix.task.project_key }}
          PROJECT_DEFCONFIG: ${{ matrix.task.config.defconfig }}
          PROJECT_LOCALVERSION_BASE: ${{ matrix.task.config.localversion_base }}
          PROJECT_LTO: ${{ matrix.task.config.lto }}
          PROJECT_TOOLCHAIN_PATH_PREFIX: ${{ matrix.task.config.toolchain_path_prefix }}
          PROJECT_TOOLCHAIN_PATH_EXPORTS: ${{ toJSON(matrix.task.config.toolchain_path_exports) }}
          PROJECT_ZIP_NAME_PREFIX: ${{ matrix.task.config.zip_name_prefix }}
          PROJECT_REPO: ${{ matrix.task.config.repo }}
          PROJECT_VERSION_METHOD: ${{ matrix.task.config.version_method }}
          PROJECT_EXTRA_HOST_ENV: ${{ matrix.task.config.extra_host_env }}
          PROJECT_DISABLE_SECURITY: ${{ toJSON(matrix.task.config.disable_security) }}
        run: |
          cd kernel_repo
          ../central_repo/scripts/build_parallel.sh
      - name: Upload Compiled Image
        uses: actions/upload-artifact@v4
        with:
          name: image-${{ matrix.task.project_key }}-${{ matrix.task.suffix }}
          path: Image_${{ matrix.task.suffix }}

  # Job 3: Package everything and create the release
  package-and-release:
    # This job will only run for single-project manual triggers.
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.project_key != 'all'
    needs: [prepare-matrix, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Central Repo
        uses: actions/checkout@v4
        with:
          path: central_repo
      - name: Parse AnyKernel3 Repo URL
        id: parse_repo
        run: |
          # Extract config from the first build task in the matrix
          ANYKERNEL_REPO=$(echo '${{ needs.prepare-matrix.outputs.matrix }}' | jq -r '.[0].config.anykernel_repo')
          REPO_PATH=$(echo "$ANYKERNEL_REPO" | sed 's|https://github.com/||' | sed 's|\.git||')
          echo "path=${REPO_PATH}" >> $GITHUB_OUTPUT
      - name: Checkout AnyKernel3 Patcher Branch
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.parse_repo.outputs.path }}
          ref: ${{ fromJson(needs.prepare-matrix.outputs.matrix)[0].config.anykernel_branch }}-patcher
          path: anykernel_patcher_repo
      - name: Download all compiled images
        uses: actions/download-artifact@v4
        with:
          path: compiled-images
      - name: Create Patches and Package
        id: package
        env:
          MATRIX_JSON: ${{ needs.prepare-matrix.outputs.matrix }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # The downloaded artifacts are in subdirectories, move them up
          find compiled-images -type f -name 'Image_*' -exec mv {} . \;
          
          # Extract info from the first element of the matrix JSON
          PROJECT_CONFIG=$(echo "$MATRIX_JSON" | jq -r '.[0].config')
          PROJECT_KEY=$(echo "$MATRIX_JSON" | jq -r '.[0].project_key')
          PROJECT_ZIP_NAME_PREFIX=$(echo "$PROJECT_CONFIG" | jq -r '.zip_name_prefix')
          GITHUB_REPO=$(echo "$PROJECT_CONFIG" | jq -r '.repo')
          
          # Determine Base Branch and Suffix again
          SUPPORTED_KSU=$(echo "$PROJECT_CONFIG" | jq -r '.supported_ksu | .[]')
          if git ls-remote --exit-code --heads "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPO}" main >/dev/null 2>&1; then
            BASE_BRANCH="main"
            BASE_SUFFIX="LKM"
          else
            BASE_BRANCH=$(echo "$SUPPORTED_KSU" | head -n 1)
            BASE_SUFFIX=$(echo "$BASE_BRANCH" | tr '[:lower:]' '[:upper:]' | sed 's/SUKI SUULTRA/SukiSUU/')
          fi

          mv "Image_${BASE_SUFFIX}" "Image_Base"
          
          echo "--- Creating bsdiff patches ---"
          pip install bsdiff4
          mkdir -p ./patches
          for image_file in Image_*; do
            [ "$image_file" == "Image_Base" ] && continue
            suffix=$(echo "$image_file" | sed 's/Image_//')
            branch_name=$(echo "$suffix" | tr '[:upper:]' '[:lower:]' | sed 's/sukisuu/sukisuultra/' | sed 's/lkm/main/')
            echo "Creating patch for $suffix..."
            python3 ./central_repo/scripts/bsdiff4_create.py "Image_Base" "$image_file" "./patches/${branch_name}.p"
          done
          
          echo "--- Preparing AnyKernel3 Patcher package ---"
          mv Image_Base ./anykernel_patcher_repo/Image
          echo "$BASE_SUFFIX" > ./anykernel_patcher_repo/base_kernel_name
          if [ -d "./patches" ] && [ "$(ls -A ./patches)" ]; then
            mv ./patches/* ./anykernel_patcher_repo/bs_patches/
          fi
          
          cd ./anykernel_patcher_repo
          kernel_release="Weekly-Build"
          final_name="${PROJECT_ZIP_NAME_PREFIX}_${kernel_release}_Patch-Kit_$(TZ='Asia/Hong_Kong' date '+%Y%m%d')"
          zip -r9 "../${final_name}.zip" . -x "*.zip" README.md LICENSE '.*' '*/.*'
          cd ..
          UPLOAD_FILE_PATH=$(realpath "${final_name}.zip")
          
          echo "--- Publishing to GitHub Release ---"
          TAG="weekly-release-$(TZ='Asia/Hong_Kong' date +%Y%m%d-%H%M)"
          RELEASE_TITLE="周常更新 - ${PROJECT_ZIP_NAME_PREFIX} (并行多合一差分包 | $(TZ='Asia/Hong_Kong' date +'%Y-%m-%d'))"
          RELEASE_NOTES="由 CI 在 $(TZ='Asia/Hong_Kong' date) 自动构建的周常差分更新包。刷入时可在 Recovery 中选择需要的内核版本。"
          gh release create "$TAG" "$UPLOAD_FILE_PATH" --repo "$GITHUB_REPO" --title "$RELEASE_TITLE" --notes "$RELEASE_NOTES" --target "$BASE_BRANCH"
